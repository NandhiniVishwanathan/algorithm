import time
import matplotlib.pyplot as plt

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


def heapify(arr, n, i):
    largest = i
    left = 2 * i + 1
    right = 2 * i + 2

    if left < n and arr[left] > arr[largest]:
        largest = left

    if right < n and arr[right] > arr[largest]:
        largest = right

    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def heap_sort(arr):
    n = len(arr)
    

    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  
        heapify(arr, i, 0)  

def measure_insertion_sort_time(n):
    arr = list(range(n, 0, -1)) 
    start_time = time.time()
    insertion_sort(arr)
    end_time = time.time()
    return end_time - start_time

def measure_heap_sort_time(n):
    arr = list(range(n, 0, -1)) 
    start_time = time.time()
    heap_sort(arr)
    end_time = time.time()
    return end_time - start_time
n_values = range(100, 2001, 100)  
insertion_times = []
heap_times = []

for n in n_values:
    insertion_time = measure_insertion_sort_time(n)
    insertion_times.append(insertion_time)
    
    heap_time = measure_heap_sort_time(n)
    heap_times.append(heap_time)

plt.plot(n_values, insertion_times, label='Insertion Sort', marker='o')
plt.plot(n_values, heap_times, label='Heap Sort', marker='x')
plt.xlabel('Number of Elements (n)')
plt.ylabel('Time Taken (seconds)')
plt.title('Sorting Time Comparison (Insertion Sort vs Heap Sort)')
plt.legend()
plt.grid(True)
plt.show()
